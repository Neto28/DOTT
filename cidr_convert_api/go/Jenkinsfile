pipeline {
  agent any
  stages {
    stage('Build') {
      steps {
        sh '''echo "BUILDING"

echo "BUILDING DOCKER"
sudo yum install -y yum-utils
sudo yum-config-manager \\
    --add-repo \\
    https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install docker-ce docker-ce-cli containerd.io
sudo systemctl start docker

echo "BUILDING GO CONTAINER"
cd cidr_convert_api/go/
sudo docker build -t gom .

echo "DESTORING EXISTING GO CONTAINER"
sudo docker rm -f $(sudo docker ps -aqf "name=goimage")

echo "RUN GO CONTAINER"
sudo docker run -d --name goimage -ti -p 8000:8000 gom
'''
      }
    }

    stage('SonarCloud') {
      steps {
        sh '''echo "STATIC CODE ANALYSIS"

export SONAR_SCANNER_VERSION=4.4.0.2170
export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
export PATH=$SONAR_SCANNER_HOME/bin:$PATH
export SONAR_SCANNER_OPTS="-server"

sonar-scanner

'''
      }
    }

    stage('Testing') {
      steps {
        warnError(message: 'Failed to Run') {
          sh '''cd cidr_convert_api/go/

sudo docker exec -i $(sudo docker ps -aqf "name=goimage") go test'''
        }

        sh '''echo "UNIT TESTING"

sudo docker ps -a
'''
      }
    }

    stage('Deploy') {
      steps {
        sh '''echo "Test"

'''
      }
    }

  }
  environment {
    build = 'false'
  }
}