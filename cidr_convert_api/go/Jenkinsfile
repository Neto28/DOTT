pipeline {
  agent any
  stages {
    stage('Build') {
      steps {
        echo 'BUILDING'
        warnError(message: 'Container already running') {
          dir(path: 'cidr_convert_api/go/') {
            sh 'containerID=$(docker ps -aqf "name=goimage")'
            sh 'docker run -d --name goimage -ti -p 8000:8000 gom'
          }

        }

      }
    }

    stage('SonarCloud') {
      steps {
        echo 'SONARCLOUD STATIC CODE ANALYSIS'
        warnError(message: 'Sonar-Scanner Error') {
          sh '''export SONAR_SCANNER_VERSION=4.4.0.2170
export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
export PATH=$SONAR_SCANNER_HOME/bin:$PATH
export SONAR_SCANNER_OPTS="-server"

sonar-scanner'''
        }

        warnError(message: 'Jenkins SonarQube Failure') {
          sh '''withSonarQubeEnv(\'Sonar-Scanner\', envOnly: true) {
  println ${env.SONAR_HOST_URL} 
}'''
          }

          warnError(message: 'SonarQube Error') {
            script {
				      def scannerHome = tool 'My SonarQube Server';
					   	withSonarQubeEnv("My SonarQube Server") {
						   sh "${tool("My SonarQube Server")}/bin/sonar-scanner
					  }
          }
        }
      }

      stage('Testing') {
        steps {
          warnError(message: 'Failed to Run Tests') {
            sh 'go version'
            dir(path: 'cidr_convert_api/go/') {
              sh 'docker exec -i $(docker ps -aqf "name=goimage") go test'
            }

          }

        }
      }

      stage('Deploy') {
        steps {
          echo 'DEPLOYING'
          warnError(message: 'Container doesn\'t exist') {
            sh '''echo "DESTORING EXISTING GO CONTAINER"
docker rm -f $(docker ps -aqf "name=goimage")
'''
          }

        }
      }

    }
  }
