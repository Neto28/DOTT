pipeline {
  agent any
  stages {
    stage('Build') {
      steps {
        echo 'BUILDING'
        warnError(message: 'Container already running') {
          dir(path: 'cidr_convert_api/go/') {
            sh 'containerID=$(docker ps -aqf "name=goimage")'
            sh 'docker run -d --name goimage -ti -p 8000:8000 gommy'
          }

        }

      }
    }

    stage('SonarCloud') {
      steps {
        script {
          echo 'SONARCLOUD STATIC CODE ANALYSIS'
          dir(path: 'cidr_convert_api/go/') {
            sh 'docker exec -i $(docker ps -aqf "name=goimage") go test -coverprofile=coverage.out'
            sh 'ls'
          }
          warnError(message: 'Jenkins SonarQube Failure') {
            def scannerHome = tool 'My SonarQube Server';
            withSonarQubeEnv("My SonarQube Server") {
              sh "${tool("My SonarQube Server")}/bin/sonar-scanner \
              -Dsonar.organization=$ORG \
              -Dsonar.projectKey=$KEY \
              -Dsonar.sources=. \
              -Dsonar.login=$TOKEN \
              -Dsonar.go.tests.reportPaths=$WORKSPACE/cidr_convert_api/go/coverage.out \
              -Dsonar.host.url=https://sonarcloud.io"
            }
          }
        }

      }
    }

    stage("Quality Gate"){
      steps{
        script {
          def ceTask
          timeout(time: 1, unit: 'MINUTES') {
            waitUntil {
              ceTask = jsonParse($HOST, $TOKEN)
              echo ceTask.toString()
              return "SUCCESS".equals(ceTask["task"]["status"])
            }
          }
          url = new URL($HOST + "/api/qualitygates/project_status?analysisId=" + ceTask["task"]["analysisId"])
          def qualitygate =  jsonParse($HOST, $TOKEN)
          echo qualitygate.toString()
          if ("ERROR".equals(qualitygate["projectStatus"]["status"])) {
            error  "Quality Gate Failure"
          }
          echo  "Quality Gate Success"
        }
      }
    }

    stage('Testing') {
      steps {
        warnError(message: 'Failed to Run Tests') {
          sh 'go version'
          dir(path: 'cidr_convert_api/go/') {
            sh 'docker exec -i $(docker ps -aqf "name=goimage") go test'
            sh 'docker exec -i $(docker ps -aqf "name=goimage") golint'
          }

        }

      }
    }

    stage('Deploy') {
      steps {
        echo 'DEPLOYING'
        warnError(message: 'Container doesn\'t exist') {
          echo 'DESTROYING GO CONTAINER'
          sh 'docker rm -f $(docker ps -aqf "name=goimage")'
        }

      }
    }

  }
  environment {
    ORG = credentials('org')
    HOST = credentials('host')
    KEY = credentials('key')
    TOKEN = credentials('token')
  }
}
